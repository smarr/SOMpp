stages:
  - build-and-test
  - benchmark-completion

variables:
  PYTHONUNBUFFERED: "true"

before_script:
  - |+
    git submodule update --init
    if [ "$MACHINE" = "zullie1" ]; then
      export PATH=/opt/local/bin:/Users/gitlab-runner/Library/Python/3.12/bin:$PATH
      export MP='-mp'
    fi

build_and_test:
  stage: build-and-test
  parallel:
    matrix:
      - MACHINE:
          - yuria
          - yuria2
          - yuria3
        COMPILER: [clang]
        GC: [COPYING]
        CMAKE_FLAGS:
          - "-DUSE_TAGGING=true"
          - "-DUSE_TAGGING=false -DCACHE_INTEGER=true"
          - "-DUSE_TAGGING=false -DCACHE_INTEGER=false"
          - "-DUSE_TAGGING=false -DCACHE_INTEGER=false -DUSE_VECTOR_PRIMITIVES=false"

      # Track GCC only for one configuration
      - MACHINE: [yuria, yuria2, yuria3]
        COMPILER: [gcc]
        GC: [COPYING]
        CMAKE_FLAGS: ["-DUSE_TAGGING=true"]

      - MACHINE: [zullie1]
        COMPILER: [clang]
        GC: [GENERATIONAL]
        CMAKE_FLAGS:
          - "-DUSE_TAGGING=true"
          - "-DUSE_TAGGING=false -DCACHE_INTEGER=true"
          - "-DUSE_TAGGING=false -DCACHE_INTEGER=false"
          - "-DUSE_TAGGING=false -DCACHE_INTEGER=false -DUSE_VECTOR_PRIMITIVES=false"

      # Mark-Sweep working, but not super exciting
      - MACHINE: [yuria, yuria2, yuria3]
        COMPILER: [gcc]
        GC: [MARK_SWEEP]
        CMAKE_FLAGS: ["-DUSE_TAGGING=true"]

  tags: [$MACHINE]
  script:
    - rm -rf release && mkdir release
    - rm -rf debug && mkdir debug

    - if [ "$COMPILER" = "gcc" ];   then export CC=gcc-13;   export CXX=g++-13; fi
    - if [ "$COMPILER" = "clang" ]; then export CC=clang$MP-18; export CXX=clang++$MP-18; fi

    # compose a name for this configuration
    - |+
      export NAME="som-$COMPILER-$GC"
      if [[ $CMAKE_FLAGS =~ "USE_TAGGING=true" ]]; then
        NAME="$NAME-inttag"
      else
        NAME="$NAME-intbox"
      fi
      if [[ $CMAKE_FLAGS =~ "CACHE_INTEGER=true" ]]; then
        NAME="$NAME-intcache"
      fi
      if [[ $CMAKE_FLAGS =~ "DUSE_VECTOR_PRIMITIVES=false" ]]; then
        NAME="$NAME-somvec"
      fi
      NAME=`echo "$NAME" | tr '[:upper:]' '[:lower:]'`

    - cd release
    - cmake .. $CMAKE_FLAGS -DGC_TYPE=$GC -DCMAKE_BUILD_TYPE=Release
    - make -j
    - mv SOM++ ../$NAME
    - cd ..

    - cd debug
    - cmake .. $CMAKE_FLAGS -DGC_TYPE=$GC -DCMAKE_BUILD_TYPE=Debug
    - make -j
    - ./SOM++ -cp ../Smalltalk ../TestSuite/TestHarness.som
    - ./unittests -cp ../Smalltalk:../TestSuite/BasicInterpreterTests ../Examples/Hello.som
    - cd ..

    - |+
      # Test SomSom
      if [ "$COMPILER" = "clang" ]; then
        # this is to load balance the SomSom testing
        # only when compiling with Clang, and only on one machine for each integer configuration
        if [ "$MACHINE $CMAKE_FLAGS" = "zullie1 -DUSE_TAGGING=true" ] || [ "$MACHINE $CMAKE_FLAGS" = "yuria2 -DUSE_TAGGING=false -DCACHE_INTEGER=true" ] || [ "$MACHINE $CMAKE_FLAGS" = "yuria3 -DUSE_TAGGING=false -DCACHE_INTEGER=false" ]; then
          ./$NAME -cp Smalltalk:TestSuite:core-lib/SomSom/src/compiler:core-lib/SomSom/src/interpreter:core-lib/SomSom/src/primitives:core-lib/SomSom/src/vm:core-lib/SomSom/src/vmobjects core-lib/SomSom/tests/SomSomTests.som
        fi
      fi

    # run the benchmarks
    - |+
      if [ "$MACHINE" = "zullie1" ]; then
        M=''
      else
        M="t:$MACHINE"
      fi
      rebench --experiment="CI ID $CI_PIPELINE_ID" --branch="$CI_COMMIT_REF_NAME" -c rebench.conf all "e:${NAME}" $M

complete_benchmarking:
  stage: benchmark-completion
  tags: [yuria3]
  script:
    - rebench --experiment="CI ID $CI_PIPELINE_ID" --report-completion rebench.conf
